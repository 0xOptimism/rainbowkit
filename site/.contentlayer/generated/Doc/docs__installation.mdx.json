{
  "title": "Installation",
  "description": "Get up and running with RainbowKit",
  "body": {
    "raw": "\n# Installation\n\n## Get up and running with RainbowKit\n\nRainbowKit makes it easy to add wallet connection to your dapp. It's intuitive, lightweight and customizable.\n\n### Install\n\nInstall RainbowKit along with [wagmi](https://wagmi-xyz.vercel.app/) and its [ethers](https://docs.ethers.io) peer dependency.\n\n```\nnpm install @rainbow-me/rainbowkit wagmi ethers\n```\n\n### Getting started\n\nTo start, import RainbowKit’s base styles, configure your wallets and desired chains, generate the required connectors, then wrap your application with `RainbowKitProvider` and [`WagmiProvider`](https://wagmi-xyz.vercel.app/docs/provider).\n\n```tsx\nimport '@rainbow-me/rainbowkit/styles.css';\n\nimport {\n  RainbowKitProvider,\n  Chain,\n  getDefaultWallets,\n  connectorsForWallets,\n} from '@rainbow-me/rainbowkit';\nimport { WagmiProvider, chain } from 'wagmi';\nimport { providers } from 'ethers';\n\nconst infuraId = process.env.INFURA_ID;\n\nconst provider = ({ chainId }) =>\n  new providers.InfuraProvider(chainId, infuraId);\n\nconst chains: Chain[] = [\n  { ...chain.mainnet, name: 'Ethereum' },\n  { ...chain.polygonMainnet, name: 'Polygon' },\n  { ...chain.optimism, name: 'Optimism' },\n  { ...chain.arbitrumOne, name: 'Arbitrum' },\n];\n\nconst wallets = getDefaultWallets({\n  chains,\n  infuraId,\n  appName: 'My RainbowKit App',\n  jsonRpcUrl: ({ chainId }) =>\n    chains.find(x => x.id === chainId)?.rpcUrls?.[0] ??\n    chain.mainnet.rpcUrls[0],\n});\n\nconst connectors = connectorsForWallets(wallets);\n\nconst App = () => {\n  return (\n    <RainbowKitProvider chains={chains}>\n      <WagmiProvider autoConnect connectors={connectors} provider={provider}>\n        <YourApp />\n      </WagmiProvider>\n    </RainbowKitProvider>\n  );\n};\n```\n\nThen, in your app, import RainbowKit’s `ConnectButton` component.\n\n```tsx\nimport { ConnectButton } from '@rainbow-me/rainbowkit';\n\nexport const YourApp = () => {\n  return (\n    <>\n      <ConnectButton />\n    </>\n  );\n};\n```\n\nYou’re done! RainbowKit will now handle your user’s wallet selection, display wallet/transaction information and handle network/wallet switching.\n",
    "code": "var Component=(()=>{var h=Object.create;var a=Object.defineProperty;var p=Object.getOwnPropertyDescriptor;var m=Object.getOwnPropertyNames;var w=Object.getPrototypeOf,u=Object.prototype.hasOwnProperty;var c=e=>a(e,\"__esModule\",{value:!0});var g=(e,t)=>()=>(t||e((t={exports:{}}).exports,t),t.exports),b=(e,t)=>{for(var r in t)a(e,r,{get:t[r],enumerable:!0})},s=(e,t,r,i)=>{if(t&&typeof t==\"object\"||typeof t==\"function\")for(let o of m(t))!u.call(e,o)&&(r||o!==\"default\")&&a(e,o,{get:()=>t[o],enumerable:!(i=p(t,o))||i.enumerable});return e},f=(e,t)=>s(c(a(e!=null?h(w(e)):{},\"default\",!t&&e&&e.__esModule?{get:()=>e.default,enumerable:!0}:{value:e,enumerable:!0})),e),v=(e=>(t,r)=>e&&e.get(t)||(r=s(c({}),t,1),e&&e.set(t,r),r))(typeof WeakMap!=\"undefined\"?new WeakMap:0);var d=g((P,l)=>{l.exports=_jsx_runtime});var R={};b(R,{default:()=>I,frontmatter:()=>x});var n=f(d()),x={title:\"Installation\",description:\"Get up and running with RainbowKit\"};function y(e={}){let{wrapper:t}=e.components||{};return t?(0,n.jsx)(t,Object.assign({},e,{children:(0,n.jsx)(r,{})})):r();function r(){let i=Object.assign({h1:\"h1\",h2:\"h2\",p:\"p\",h3:\"h3\",a:\"a\",pre:\"pre\",code:\"code\"},e.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(i.h1,{children:\"Installation\"}),`\n`,(0,n.jsx)(i.h2,{children:\"Get up and running with RainbowKit\"}),`\n`,(0,n.jsx)(i.p,{children:\"RainbowKit makes it easy to add wallet connection to your dapp. It's intuitive, lightweight and customizable.\"}),`\n`,(0,n.jsx)(i.h3,{children:\"Install\"}),`\n`,(0,n.jsxs)(i.p,{children:[\"Install RainbowKit along with \",(0,n.jsx)(i.a,{href:\"https://wagmi-xyz.vercel.app/\",children:\"wagmi\"}),\" and its \",(0,n.jsx)(i.a,{href:\"https://docs.ethers.io\",children:\"ethers\"}),\" peer dependency.\"]}),`\n`,(0,n.jsx)(i.pre,{children:(0,n.jsx)(i.code,{children:`npm install @rainbow-me/rainbowkit wagmi ethers\n`})}),`\n`,(0,n.jsx)(i.h3,{children:\"Getting started\"}),`\n`,(0,n.jsxs)(i.p,{children:[\"To start, import RainbowKit\\u2019s base styles, configure your wallets and desired chains, generate the required connectors, then wrap your application with \",(0,n.jsx)(i.code,{children:\"RainbowKitProvider\"}),\" and \",(0,n.jsx)(i.a,{href:\"https://wagmi-xyz.vercel.app/docs/provider\",children:(0,n.jsx)(i.code,{children:\"WagmiProvider\"})}),\".\"]}),`\n`,(0,n.jsx)(i.pre,{children:(0,n.jsx)(i.code,{className:\"language-tsx\",children:`import '@rainbow-me/rainbowkit/styles.css';\n\nimport {\n  RainbowKitProvider,\n  Chain,\n  getDefaultWallets,\n  connectorsForWallets,\n} from '@rainbow-me/rainbowkit';\nimport { WagmiProvider, chain } from 'wagmi';\nimport { providers } from 'ethers';\n\nconst infuraId = process.env.INFURA_ID;\n\nconst provider = ({ chainId }) =>\n  new providers.InfuraProvider(chainId, infuraId);\n\nconst chains: Chain[] = [\n  { ...chain.mainnet, name: 'Ethereum' },\n  { ...chain.polygonMainnet, name: 'Polygon' },\n  { ...chain.optimism, name: 'Optimism' },\n  { ...chain.arbitrumOne, name: 'Arbitrum' },\n];\n\nconst wallets = getDefaultWallets({\n  chains,\n  infuraId,\n  appName: 'My RainbowKit App',\n  jsonRpcUrl: ({ chainId }) =>\n    chains.find(x => x.id === chainId)?.rpcUrls?.[0] ??\n    chain.mainnet.rpcUrls[0],\n});\n\nconst connectors = connectorsForWallets(wallets);\n\nconst App = () => {\n  return (\n    <RainbowKitProvider chains={chains}>\n      <WagmiProvider autoConnect connectors={connectors} provider={provider}>\n        <YourApp />\n      </WagmiProvider>\n    </RainbowKitProvider>\n  );\n};\n`})}),`\n`,(0,n.jsxs)(i.p,{children:[\"Then, in your app, import RainbowKit\\u2019s \",(0,n.jsx)(i.code,{children:\"ConnectButton\"}),\" component.\"]}),`\n`,(0,n.jsx)(i.pre,{children:(0,n.jsx)(i.code,{className:\"language-tsx\",children:`import { ConnectButton } from '@rainbow-me/rainbowkit';\n\nexport const YourApp = () => {\n  return (\n    <>\n      <ConnectButton />\n    </>\n  );\n};\n`})}),`\n`,(0,n.jsx)(i.p,{children:\"You\\u2019re done! RainbowKit will now handle your user\\u2019s wallet selection, display wallet/transaction information and handle network/wallet switching.\"})]})}}var I=y;return v(R);})();\n;return Component;"
  },
  "_id": "docs/installation.mdx",
  "_raw": {
    "sourceFilePath": "docs/installation.mdx",
    "sourceFileName": "installation.mdx",
    "sourceFileDir": "docs",
    "contentType": "mdx",
    "flattenedPath": "docs/installation"
  },
  "type": "Doc",
  "slug": "installation"
}